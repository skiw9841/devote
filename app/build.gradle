apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'
apply plugin: 'kotlin-android-extensions'
apply plugin: 'io.fabric'

static def releaseTime() {
    return new Date().format("yyyy-MM-dd", TimeZone.getTimeZone("UTC"))
}

def APP_NAME = 'DEVOTE';
def FLAVOR_DEV = 'dev';
def FLAVOR_REAL = 'real';


buildscript {
//    ext.kotlin_version = '1.0.4'
    ext.kotlin_version = '1.3.10'

    repositories {
        jcenter()
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
    }

}


android {
    compileSdkVersion 29
//    buildToolsVersion '27.0.3'

    lintOptions {
        checkReleaseBuilds false
    }

    defaultConfig {
        applicationId "com.ad4th.devote"
        minSdkVersion 19
        targetSdkVersion 29
        versionCode 16
        versionName "1.2.8"
//        versionCode 15
//        versionName "1.2.7"

        multiDexEnabled true
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
    }

    sourceSets {
        main.java.srcDirs += 'src/main/kotlin'
    }

    flavorDimensions "dev"                          // default flavor
    productFlavors {
        dev {
            applicationId "com.ad4th.devote" // application package name
        }
        real {
        }
    }

    /* 어플리케이션 변수 초기화 셋팅  */
    applicationVariants.all { variant ->

        def propsFile = rootProject.file("uri.properties")
        def flavor = variant.properties.get('flavorName')

        if (propsFile.exists()) {
            def props = new Properties();
            props.load(new FileInputStream(propsFile));
            switch (flavor) {
            /* 개발자 모드 인지 체크  */
                case FLAVOR_DEV:
                    def scheme = '\"' + props['devScheme'] + "\"";
                    def host = '\"' + props['devHost'] + "\"";
                    def port = '\"' + props['devPort'] + "\"";

                    buildConfigField "String", "SCHEME", scheme
                    buildConfigField "String", "HOST", host
                    buildConfigField "String", "PORT", port
                    break;
            /* 상용 모드 인지 체크  */
                case FLAVOR_REAL:
                    def scheme = '\"' + props['realScheme'] + "\"";
                    def host = '\"' + props['realHost'] + "\"";
                    def port = '\"' + props['realPort'] + "\"";

                    buildConfigField "String", "SCHEME", scheme
                    buildConfigField "String", "HOST", host
                    buildConfigField "String", "PORT", port
                    break;
            }
        }

        //apk 배포 파일 생성
        variant.outputs.all { output ->

            def outputFile = output.outputFile
            if (outputFile != null && outputFile.name.endsWith('.apk')) {
                def customName
                if (flavor.equals(FLAVOR_REAL)) {
                    customName = outputFile.name.replace("app", "${defaultConfig.applicationId}_${flavor}_${defaultConfig.versionName}")
                } else {
                    customName = outputFile.name.replace("app", "${defaultConfig.applicationId}_${flavor}_${defaultConfig.versionName}_${releaseTime()}")
                }
                outputFileName = customName
            }

        }
    }


    signingConfigs {
        debug {
        }
        release {
            def propsFile = rootProject.file("keystore.properties")
            if (propsFile.exists()) {
                def props = new Properties()
                props.load(new FileInputStream(propsFile))
                System.out.println(file(props['storeFile']));
                storeFile = file(props['storeFile'])
                keyAlias = props['keyAlias']
                storePassword = props['storePassword']
                keyPassword = props['keyPassword']
            }
            dexOptions {
                javaMaxHeapSize "12g"
                jumboMode true
            }
        }
    }


    buildTypes {
        release {
            minifyEnabled false
            signingConfig signingConfigs.release
            zipAlignEnabled true
        }
        debug {
            multiDexEnabled true
            signingConfig signingConfigs.debug
        }
    }

}


dependencies {
    implementation fileTree(dir: 'libs', include: ['*.jar'])

    implementation"org.jetbrains.kotlin:kotlin-stdlib-jdk7:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.0.2'
    implementation 'androidx.core:core-ktx:1.0.2'
    implementation 'androidx.constraintlayout:constraintlayout:1.1.3'
    testImplementation 'junit:junit:4.12'
    androidTestImplementation 'androidx.test:runner:1.2.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.2.0'

    /*
    //noinspection GradleCompatible
    implementation 'com.android.support:appcompat-v7:27.1.0'
    implementation 'com.android.support:support-v4:27.1.0'
    implementation 'com.android.support:design:27.1.0'
*/
    /**
     *      kotlin      */
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"

    /**
     *      google vision library    */
    implementation 'com.google.android.gms:play-services-vision:11.8.0'
    implementation 'com.google.firebase:firebase-messaging:11.8.0'

    /**
     *      QR CODE SCAN    */
    implementation 'com.dlazaro66.qrcodereaderview:qrcodereaderview:2.0.3'

    /**
     *       EventBus - 이벤트 버스 라이브러리        */
    implementation 'de.greenrobot:eventbus:2.4.0'

    /**
     *      Alert 다이어로그     */
    implementation 'com.afollestad.material-dialogs:core:0.9.6.0'

    /**
     *      퍼미션 권한체크 라이브러리      */
    implementation 'gun0912.ted:tedpermission:2.1.1'

    /**
     *      HTTP 통신     */
    implementation 'com.squareup.retrofit2:retrofit:2.3.0'
    implementation 'com.squareup.retrofit2:converter-gson:2.3.0'
    implementation 'com.squareup.okhttp3:okhttp:3.8.1'
    implementation 'com.squareup.okhttp3:logging-interceptor:3.8.1'

    /**
     *      아이콘      */
    implementation 'org.apache.httpcomponents:fluent-hc:4.5.3'
    implementation 'com.google.code.gson:gson:2.8.0'
    implementation 'com.madgag.spongycastle:core:1.58.0.0'
    implementation 'com.madgag.spongycastle:prov:1.58.0.0'

    /**
     *      이미지 로더      */
    implementation 'com.github.bumptech.glide:glide:4.7.1'
    implementation 'jp.wasabeef:glide-transformations:3.3.0'
//    // If you want to use the GPU Filters
//    implementation 'jp.co.cyberagent.android.gpuimage:gpuimage-library:1.4.1'


    implementation 'com.android.support:multidex:1.0.1'

    /**
     *      Fabric     */
    implementation('com.crashlytics.sdk.android:crashlytics:2.9.1@aar') {
        transitive = true
    }
    implementation 'com.google.firebase:firebase-core:11.6.0'

    /**
     *      Butter knife        */
//    implementation 'com.jakewharton:butterknife:8.5.1'
//    annotationProcessor 'com.jakewharton:butterknife-compiler:8.5.1'

//    implementation 'com.android.support.constraint:constraint-layout:1.1.2'
}
apply plugin: 'com.google.gms.google-services'
